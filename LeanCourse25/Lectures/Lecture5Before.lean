import Mathlib.Analysis.Calculus.Deriv.Basic
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.FieldTheory.Finite.Basic

open Real
noncomputable section
variable (a b c : ‚Ñù)

/-
# Practical remarks

* Syllabus update:
  The projects do *not* count towards your final grade.
  The final grade is fully determined by the final exam.
  The projects need to be finished with a passing grade
  to be admitted to the final exam.
-/


/- # Last time

Last time we saw:

* Main tactics for **Classical logic**:
  - `by_contra h` start a proof by contradiction.
  - `by_cases h : p` to start a proof by cases on statement `p`.
  - `push_neg` to push negations inside quantifiers and connectives.

* `ext` proves that two functions are equal if their values are equal.

* There are many way to find useful lemmas. Notably:
  - `apply?`: find all lemmas that apply to the current goal;
  - `rw??`: shift-click on expressions to get suggestions for lemmas;
  - `#loogle <query>`: syntactic searches;
  - `#leansearch "<query>."`: natural language searches.

* Orders:
  - `linarith` proves (in)equalities using linear combinations of hypotheses.
  - `gcongr` applies monotonicity of functions
-/

example (x : ‚Ñù) : (Real.sin x) ^ 2 ‚â§ 1 := by
  sorry
  done

example : Complex.exp (Complex.I * œÄ) + 1 = 0 := by
  sorry
  done


example {a b c d : ‚Ñù} (h‚ÇÄ : 0 < b) (h‚ÇÅ : b < a) (h‚ÇÇ : c ‚â§ d) :
    1 / a + Real.exp c ‚â§ 1 / b + Real.exp d := by
  sorry
  done

/-
# Today: Orders (continued) and Sets
-/


/- Remark: for equalities, you should use `congr` instead of `gcongr` -/

example (h : a = b) : c - exp b = c - exp a := by
  sorry
  done




/- `grw` can be used to rewrite with inequalities. -/

example {a b c d : ‚Ñù} (h‚ÇÄ : 0 < b) (h‚ÇÅ : b < a) (h‚ÇÇ : c ‚â§ d) :
    1 / a + exp c ‚â§ exp d + 1 / b := by
  sorry
  done




/-
`grw` can also be used to rewrite with other relations.
In contrast: `rw` can *only* rewrite with `=` or `‚Üî`.
-/

#check 8 ‚â° 3 [ZMOD 5]

example {a b n : ‚Ñ§} (h : a ‚â° b [ZMOD n]) : a ^ 2 ‚â° b ^ 2 [ZMOD n] := by
  grw [h]



example {a b c d n : ‚Ñ§} (h : a ‚â° b [ZMOD n]) (h' : c ‚â° d [ZMOD n]) :
    a ^ 2 * c ‚â° b ^ 2 * d [ZMOD n] := by
  sorry
  done



example {a b c : ‚Ñ§} (h‚ÇÅ : a ‚à£ b) (h‚ÇÇ : b ‚à£ a ^ 2 * c) :
    a ‚à£ b ^ 2 * c := by
  sorry
  done



example (f g : ‚Ñù ‚Üí ‚Ñù) (h : ‚àÄ x : ‚Ñù, f x ‚â§ g x)
    (h‚ÇÇ : g a + g b ‚â§ 5) : f a + f b ‚â§ 5 := by
  sorry
  done






/-
`order` is a simple tactic that can perform purely
order-theoretic reasoning (not involving monotone operations).
-/

example {a b c d e : ‚Ñù} (h‚ÇÄ : a = b) (h‚ÇÅ : b < c)
    (h‚ÇÇ : c ‚â§ d) (h‚ÇÉ : d < e) : a < e := by
  order
  done



/-
We've introduced a lot of tactics.
You can find an overview of common tactics
in the **Tactic cheatsheet** of this repository.
-/







/- # Sets

In set theory you can make sets with arbitrary elements.
In Lean, all sets have to be sets of elements from a specific type.

If `s : Set Œ±` then `s` is a set with elements from `Œ±`.
-/

#check Set ‚Ñï
#check Set ‚Ñù

variable {Œ± Œ≤ Œπ : Type*} (x : Œ±) (s t u : Set Œ±)

/- We can talk about membership and (strict) subsets. -/

#check x ‚àà s       -- \in or \mem
#check x ‚àâ s       -- \notin
#check s ‚äÜ t       -- \sub
#check s ‚äÇ t       -- \ssub



/- We have the common set-theoretic operations.
Note: it is important that `s` and `t`
are sets of elements from the *same* type. -/

#check s ‚à© t       -- \inter or \cap
#check s ‚à™ t       -- \union or \cup
#check s \ t       -- the normal symbol `\` on your keyboard,
                   -- (use a space afterwards to not use the unicode-replacement)

#check s·∂ú          -- \compl or \^c
#check (‚àÖ : Set Œ±) -- \empty
#check (Set.univ : Set Œ±)

/- If you *open* a namespace, you are able to use names in it
without the prefix. -/
open Set

#check (univ : Set Œ±)






/- Showing that `x` is an element of `s ‚à© t`, `s ‚à™ t` or `s·∂ú`
corresponds by definition to conjunction, disjunction or negation. -/

#check mem_inter_iff x s t
#check mem_union x s t
#check mem_compl_iff s x

#check mem_univ x
#check notMem_empty x



/-
There are various ways to prove the following lemmas:
* use lemma `mem_inter_iff`
* use `simp`
* directly apply `constructor`
* give a direct proof: `‚ü®xs, xt‚ü©`
-/
example (hxs : x ‚àà s) (hxt : x ‚àà t) : x ‚àà s ‚à© t := by
  sorry
  done

example (hxs : x ‚àà s) : x ‚àà s ‚à™ t := by
  sorry
  done


example (hx : x ‚àà s \ t) : x ‚àà (s ‚à™ t) ‚à© (s·∂ú ‚à™ t·∂ú) := by
  sorry
  done







/- `s ‚äÜ t` means that for every element `x` in `s`,
  `x` is also an element in `t`. -/
#check (subset_def : (s ‚äÜ t) = ‚àÄ x ‚àà s, x ‚àà t)

example : s ‚à© t ‚äÜ s ‚à© (t ‚à™ u) := by
  sorry
  done

/- You can also prove it at the level of sets, without talking about elements. -/
example : s ‚à© t ‚äÜ s ‚à© (t ‚à™ u) := by
  sorry
  done





/- ## Proving two Sets are equal

You can prove that two sets are equal by applying `subset_antisymm`
or using the `ext` tactic.

`ext x` can prove that `s = t` if `x ‚àà s ‚Üî x ‚àà t` for a new variable `x`.
-/
#check (subset_antisymm : s ‚äÜ t ‚Üí t ‚äÜ s ‚Üí s = t)

example : s ‚à© t = t ‚à© s := by
  sorry
  done

/- We can also use existing lemmas and `calc`. -/
example : (s ‚à™ t·∂ú) ‚à© t = s ‚à© t := by
  sorry
  done




/-
## Set-builder notation
We can define the set of elements in `t` satisfying `P` using
  `{ x : t | P x }`
There are also variants
  `{ x     | P x }`
  `{ x ‚àà s | P x }`
-/

def evens : Set ‚Ñï := {n : ‚Ñï | Even n}
def odds : Set ‚Ñï := {n | Odd n}

example : evens·∂ú = odds := by
  sorry
  done





example : s ‚à© t = {x | x ‚àà s ‚àß x ‚àà t} := by rfl
example : s ‚à™ t = {x | x ‚àà s ‚à® x ‚àà t} := by rfl
example : s \ t = {x | x ‚àà s ‚àß x ‚àâ t} := by rfl
example : s \ t = {x ‚àà s | x ‚àâ t} := by rfl
example : s·∂ú = {x | x ‚àâ s} := by rfl

example : (‚àÖ : Set Œ±) = {_x | False} := by rfl
example : (univ : Set Œ±) = {_x | True} := by rfl


/-
## Other operations on sets
-/

/- We can take power sets. `ùí´` is typed using `\powerset`. -/
example (s : Set Œ±) : ùí´ s = {t | t ‚äÜ s} := by rfl


/- Question: What is the type of `powerset s`? -/
-- #check powerset s





/- We can take unions and intersections of families of sets
in three different ways:
* Given a family of sets `C : Œπ ‚Üí Set Œ±`
  we can take the union and intersection of `C i`
  as `i` ranges over all elements of `Œπ`.
-/
example (C : Œπ ‚Üí Set Œ±) :
    ‚ãÉ i : Œπ, C i = {x : Œ± | ‚àÉ i : Œπ, x ‚àà C i} := by ext; simp

example (C : Œπ ‚Üí Set Œ±) :
    ‚ãÇ i : Œπ, C i = {x : Œ± | ‚àÄ i : Œπ, x ‚àà C i} := by ext; simp



/-
* Given a family of sets `C : Œπ ‚Üí Set Œ±` and `s : Set Œπ`
  we can take the union and intersection of `C i`
  as `i` ranges over all elements in `s`.
-/
example (s : Set Œπ) (C : Œπ ‚Üí Set Œ±) :
    ‚ãÉ i ‚àà s, C i = {x : Œ± | ‚àÉ i ‚àà s, x ‚àà C i} := by ext; simp

example (s : Set Œπ) (C : Œπ ‚Üí Set Œ±) :
    ‚ãÇ i ‚àà s, C i = {x : Œ± | ‚àÄ i ‚àà s, x ‚àà C i} := by ext; simp




/-
* Given a collection of sets `C : Set (Set Œ±)`
  we can take the union and intersection of `c`
  for all `c ‚àà C`
-/

example (ùìí : Set (Set Œ±)) :
    ‚ãÉ‚ÇÄ ùìí = {x : Œ± | ‚àÉ s ‚àà ùìí, x ‚àà s} := by ext; simp

example (ùìí : Set (Set Œ±)) :
    ‚ãÇ‚ÇÄ ùìí = {x : Œ± | ‚àÄ s ‚àà ùìí, x ‚àà s} := by ext; simp


example (C : Œπ ‚Üí Set Œ±) (s : Set Œ±) :
    s ‚à© (‚ãÉ i, C i) = ‚ãÉ i, (C i ‚à© s) := by
  sorry
  done





/- We can take images and preimages of sets.

`f ‚Åª¬π' s` is the preimage of `s` under `f`.
`f '' s` is the image of `s` under `f`.

On paper, you would write `f(A)` or `f[A]` for the image
and `f‚Åª¬π(B)` or `f‚Åª¬π[B]` for the preimage.
This notation is hard to parse for Lean, since parentheses and ‚Åª¬π
have so many different meanings in mathematics.
Therefore we use this funny notation.
-/

example (f : Œ± ‚Üí Œ≤) (s : Set Œ≤) : f ‚Åª¬π' s = { x : Œ± | f x ‚àà s } := by rfl

example (f : Œ± ‚Üí Œ≤) (s : Set Œ±) : f '' s = { y : Œ≤ | ‚àÉ x ‚àà s, f x = y } := by rfl


example {s : Set Œ±} {t : Set Œ≤} {f : Œ± ‚Üí Œ≤} : f '' s ‚äÜ t ‚Üî s ‚äÜ f ‚Åª¬π' t := by
  sorry
  done


/- We can do pointwise operations on sets (e.g. the Minkowski sum). -/

open Pointwise

example (s t : Set ‚Ñù) :
    s + t = {x : ‚Ñù | ‚àÉ a ‚àà s, ‚àÉ b ‚àà t, a + b = x } := by rfl

example (s : Set ‚Ñù) : -s = {x : ‚Ñù | -x ‚àà s } := by rfl


/- We can write `{a, b, c, ...}` to write a set
where we explicitly enumerate its elements. -/

example : ({1, 3, 4} : Set ‚Ñù) + {0, 3} = {1, 3, 4, 6, 7} := by
  sorry
  done



/- ## Intervals -/

/-
Lean has the following names for intervals:
("c" = closed, "o" = open, "i" = infinity)
Icc a b = [a, b]
Ico a b = [a, b)
Ioc a b = (a, b]
Ioo a b = (a, b)
Ici a   = [a, ‚àû)
Ioi a   = (a, ‚àû)
Iic b   = (-‚àû, b]
Iio b   = (-‚àû, b)
-/

example : Icc a b = {x | a ‚â§ x ‚àß x ‚â§ b} := by rfl
example : Ico a b = {x | a ‚â§ x ‚àß x < b} := by rfl
example : Ioc a b = {x | a < x ‚àß x ‚â§ b} := by rfl
example : Ioo a b = {x | a < x ‚àß x < b} := by rfl
example : Ici a   = {x | a ‚â§ x}         := by rfl
example : Ioi a   = {x | a < x}         := by rfl
example : Iic b   = {x | x ‚â§ b}         := by rfl
example : Iio b   = {x | x < b}         := by rfl

example : Icc a b ‚à© Ici c = Icc (max a c) b := by
  sorry
  done
